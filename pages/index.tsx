import * as React from "react";

import {
  Box,
  Button,
  Code,
  Divider,
  Flex,
  FormControl,
  FormLabel,
  Heading,
  IconButton,
  Input,
  Link,
  Text,
  Textarea,
} from "@chakra-ui/react";

import { CloseIcon } from "@chakra-ui/icons";
import Head from "next/head";
import { State } from "@/types";
import { useInscription } from "@/hooks/useInscription";
import { useLocalStorage } from "usehooks-ts";
import { useMeta } from "@/hooks/useMeta";

export const initialState = {
  meta: {
    name: "",
    slug: "",
    supply: "",
    description: "",
    twitter_link: "",
    discord_link: "",
    website_link: "",
    inscription_icon: "",
  },
  inscriptions: [],
};

export default function Home() {
  const [domLoaded, setDomLoaded] = React.useState(false);
  const [state, setState] = useLocalStorage<State>(
    process.env.NEXT_PUBLIC_META_COMPOSER_SCHEMA_VERSION!,
    initialState
  );

  const meta = useMeta(state, setState);
  const inscription = useInscription(state, setState);

  React.useEffect(() => {
    setDomLoaded(true);
  }, []);

  // Instead of introducing a new version of the schema for localStorate,
  // we just fix the nesting of the attributes in the inscriptions and re-save the localStorate
  React.useEffect(() => {
    if (state.inscriptions) {
      const inscriptionsWithCorrectNesting = state.inscriptions.map(
        (inscription) => {
          const inscriptionCopy = { ...inscription };

          if (inscriptionCopy.attributes) {
            inscriptionCopy.meta.attributes = inscriptionCopy.attributes;
            delete inscriptionCopy.attributes;
          }

          return inscriptionCopy;
        }
      );

      setState({
        ...state,
        inscriptions: inscriptionsWithCorrectNesting,
      });
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  if (!domLoaded) {
    return null;
  }

  return (
    <>
      <Head>
        <link rel="icon" href="/favicon.ico" />
        <title>Ordinals Metadata Composer</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>

      <Flex h="full" overflow="hidden" lineHeight="tall">
        <Box
          py={{ base: 8, md: 12 }}
          px={{ base: 4, md: 8 }}
          w="full"
          bg="gray.700"
          fontSize="sm"
          overflowY="auto"
        >
          <Heading mb={4} mt={4} color="white">
            Ordinals Metadata Composer
          </Heading>

          <Box color="white" mb={8}>
            <Link href="https://twitter.com/poyo_eth" target="_blank">
              by Poyo
            </Link>
          </Box>

          <Heading color="white" textTransform="uppercase" size="sm" mb={4}>
            Meta
          </Heading>

          <Flex gap={4} direction="column">
            <FormControl>
              <FormLabel color="gray.300" fontSize="sm">
                Name
              </FormLabel>
              <Input
                color="white"
                type="text"
                value={state.meta.name}
                onChange={(e) => meta.set("name", e.target.value)}
              />
            </FormControl>
            <Flex gap={4}>
              <FormControl>
                <FormLabel color="gray.300" fontSize="sm">
                  Slug
                </FormLabel>
                <Input
                  color="white"
                  type="text"
                  value={state.meta.slug}
                  onChange={(e) => meta.set("slug", e.target.value)}
                />
              </FormControl>
              <FormControl>
                <FormLabel color="gray.300" fontSize="sm">
                  Supply
                </FormLabel>
                <Input
                  color="white"
                  type="text"
                  value={state.meta.supply}
                  onChange={(e) => meta.set("supply", e.target.value)}
                />
              </FormControl>
            </Flex>

            <FormControl>
              <FormLabel color="gray.300" fontSize="sm">
                Description
              </FormLabel>
              <Textarea
                color="white"
                value={state.meta.description}
                onChange={(e) => meta.set("description", e.target.value)}
              />
            </FormControl>

            <FormControl>
              <FormLabel color="gray.300" fontSize="sm">
                Inscription Icon
              </FormLabel>
              <Input
                color="white"
                type="text"
                value={state.meta.inscription_icon}
                onChange={(e) => meta.set("inscription_icon", e.target.value)}
              />
            </FormControl>

            <Flex gap={4}>
              <FormControl>
                <FormLabel color="gray.300" fontSize="sm">
                  Twitter Link
                </FormLabel>
                <Input
                  color="white"
                  type="text"
                  value={state.meta.twitter_link}
                  onChange={(e) => meta.set("twitter_link", e.target.value)}
                />
              </FormControl>
              <FormControl>
                <FormLabel color="gray.300" fontSize="sm">
                  Discord Link
                </FormLabel>
                <Input
                  color="white"
                  type="text"
                  value={state.meta.discord_link}
                  onChange={(e) => meta.set("discord_link", e.target.value)}
                />
              </FormControl>
              <FormControl>
                <FormLabel color="gray.300" fontSize="sm">
                  Website Link
                </FormLabel>
                <Input
                  color="white"
                  type="text"
                  value={state.meta.website_link}
                  onChange={(e) => meta.set("website_link", e.target.value)}
                />
              </FormControl>
            </Flex>
          </Flex>

          <Heading
            mb={6}
            mt={12}
            size="sm"
            color="white"
            textTransform="uppercase"
          >
            Inscriptions
          </Heading>

          {state.inscriptions.length ? (
            <Flex gap={4} direction="column" mb="6">
              {state.inscriptions.map((insc, index) => (
                <Flex
                  py="4"
                  px="6"
                  key={index}
                  border="1px"
                  rounded="md"
                  direction="column"
                  borderColor="yellow"
                >
                  <Flex gap={4} w="full" pb="3">
                    <FormControl>
                      <FormLabel color="gray.300" fontSize="sm">
                        ID
                      </FormLabel>
                      <Input
                        color="white"
                        type="text"
                        value={state.inscriptions[index].id}
                        onChange={(e) =>
                          inscription.set(index, "id", e.target.value)
                        }
                      />
                    </FormControl>
                    <FormControl>
                      <FormLabel color="gray.300" fontSize="sm">
                        Name
                      </FormLabel>
                      <Input
                        color="white"
                        type="text"
                        value={state.inscriptions[index].meta.name}
                        onChange={(e) =>
                          inscription.set(index, "meta", {
                            name: e.target.value,
                            attributes: insc.meta.attributes,
                          })
                        }
                      />
                    </FormControl>
                  </Flex>

                  {state.inscriptions[index].meta.attributes?.length ? (
                    <>
                      <Text color="white" fontWeight="bold" mt={4} mb={2}>
                        Attributes:
                      </Text>
                      {state.inscriptions[index].meta.attributes.map(
                        (attr, attrIndex) => (
                          <Flex key={attrIndex}>
                            <Flex gap={4} w="full" pb="3">
                              <FormControl flex="1">
                                <FormLabel color="gray.300" fontSize="sm">
                                  Trait Type
                                </FormLabel>
                                <Input
                                  color="white"
                                  type="text"
                                  value={
                                    state.inscriptions[index].meta.attributes[
                                      attrIndex
                                    ].trait_type
                                  }
                                  onChange={(e) =>
                                    inscription.setAttribute(
                                      index,
                                      attrIndex,
                                      "trait_type",
                                      e.target.value
                                    )
                                  }
                                />
                              </FormControl>
                              <Flex flex="1" gap={4} alignItems="flex-end">
                                <FormControl>
                                  <FormLabel color="gray.300" fontSize="sm">
                                    Value
                                  </FormLabel>
                                  <Input
                                    color="white"
                                    type="text"
                                    value={
                                      state.inscriptions[index].meta.attributes[
                                        attrIndex
                                      ].value
                                    }
                                    onChange={(e) =>
                                      inscription.setAttribute(
                                        index,
                                        attrIndex,
                                        "value",
                                        e.target.value
                                      )
                                    }
                                  />
                                </FormControl>
                                <IconButton
                                  color="red"
                                  aria-label="Delete"
                                  icon={<CloseIcon />}
                                  onClick={() =>
                                    inscription.removeAttribute(
                                      index,
                                      attrIndex
                                    )
                                  }
                                />
                              </Flex>
                            </Flex>
                          </Flex>
                        )
                      )}
                    </>
                  ) : null}

                  <Button
                    mt="2"
                    size="sm"
                    colorScheme="blue"
                    onClick={() => inscription.addAttribute(index)}
                  >
                    Add new attribute
                  </Button>
                  <Divider my="6" />
                  <Button
                    mb="2"
                    size="sm"
                    onClick={() => inscription.remove(index)}
                  >
                    Remove inscription
                  </Button>
                </Flex>
              ))}
            </Flex>
          ) : null}

          <Button size="sm" colorScheme="yellow" onClick={inscription.add}>
            Add new inscription
          </Button>
        </Box>

        <Code
          py={{ base: 8, md: 12 }}
          px={{ base: 4, md: 8 }}
          w="full"
          rounded="0"
          bg="gray.800"
          variant="solid"
          overflowY="auto"
          textColor="gray.500"
        >
          <Text mb="2" mt="8" color="yellow.200">{`// meta.json`}</Text>
          <pre>{JSON.stringify(state.meta, null, 2)}</pre>

          <Flex gap={2} my="4">
            <Button
              size="sm"
              variant="solid"
              colorScheme="green"
              onClick={meta.download}
            >
              Download file
            </Button>
            <Button size="sm" onClick={meta.reset}>
              Reset
            </Button>
          </Flex>

          <Text
            mb="2"
            mt="16"
            color="yellow.200"
          >{`// inscriptions.json`}</Text>
          <pre>{JSON.stringify(state.inscriptions, null, 2)}</pre>
          <Flex gap={2} my="4">
            <Button
              size="sm"
              variant="solid"
              colorScheme="green"
              onClick={inscription.download}
            >
              Download file
            </Button>
            <Button size="sm" onClick={inscription.reset}>
              Reset
            </Button>
          </Flex>
        </Code>
      </Flex>
    </>
  );
}
